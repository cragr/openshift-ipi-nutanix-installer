---
- name: 'Deploy OCP Cluster on Nutanix IPI'
  hosts: 'localhost'
  tasks:
  
  - name: 'Download and extract ccoctl-linux.tar.gz to /usr/local/bin'
    ansible.builtin.unarchive:
      src: https://mirror.openshift.com/pub/openshift-v4/{{ ansible_architecture }}/clients/ocp/{{ rhocp_version }}/ccoctl-linux.tar.gz
      dest: /usr/local/bin
      remote_src: true
      mode: u+rwx
    become: true
    become_user: root

  - name: 'Download and extract openshift-client-linux.tar.gz to /usr/local/bin'
    ansible.builtin.unarchive:
      src: https://mirror.openshift.com/pub/openshift-v4/{{ ansible_architecture }}/clients/ocp/{{ rhocp_version }}/openshift-client-linux.tar.gz
      dest: /usr/local/bin
      remote_src: true
      mode: u+rwx
    become: true
    become_user: root

  - name: 'Download and extract openshift-install-linux.tar.gz to /usr/local/bin'
    ansible.builtin.unarchive:
      src: https://mirror.openshift.com/pub/openshift-v4/{{ ansible_architecture }}/clients/ocp/{{ rhocp_version }}/openshift-install-linux.tar.gz
      dest: /usr/local/bin
      remote_src: true
      mode: u+rwx
    become: true
    become_user: root

  - name: 'Get OpenShift release image version'
    ansible.builtin.shell:
      cmd: "openshift-install version | awk '/release image/ {print $3}'"
    register: release_image_output
    changed_when: false

  - name: 'Set release image variable'
    ansible.builtin.set_fact:
      release_image: "{{ release_image_output.stdout }}"

  - name: 'Create ocp-install installation directory'
    ansible.builtin.file:
      path: "{{ rhocp_install_path }}"
      state: directory
      mode: '0755'

  - name: 'Create install-config.yaml from template'
    ansible.builtin.template:
      src: templates/install-config.yaml.j2
      dest: "{{ rhocp_install_path }}/install-config.yaml"
      
  - name: 'Create iam directory'
    ansible.builtin.file:
      path: "{{ rhocp_install_path }}/iam"
      state: directory
      mode: '0755'

  - name: 'Create iam.yaml from template'
    ansible.builtin.template:
      src: templates/iam.yaml.j2
      dest: "{{ rhocp_install_path }}/iam/iam.yaml"

  - name: 'Create credential_requests directory'
    ansible.builtin.file:
      path: "{{ rhocp_install_path }}/credential_requests"
      state: directory
      mode: '0755'

  - name: 'Extract the list of CredentialsRequest custom resources (CRs) from the OpenShift Container'
    ansible.builtin.shell:
      cmd: >
        oc adm release extract --from={{ release_image }}
        --credentials-requests --included
        --install-config={{ rhocp_install_path }}/install-config.yaml
        --to={{ rhocp_install_path }}/credential_requests

  - name: Use the ccoctl tool to process all CredentialsRequest objects
    ansible.builtin.shell:
      cmd: >
        ccoctl nutanix create-shared-secrets
        --credentials-requests-dir={{ rhocp_install_path }}/credential_requests
        --output-dir={{ rhocp_install_path }}/ccoctl
        --credentials-source-filepath={{ rhocp_install_path }}/iam/iam.yaml

  - name: 'Create manifests using openshift-install'
    ansible.builtin.shell:
      cmd: "openshift-install create manifests --dir ./{{ rhocp_install_dir }}"

  - name: Copy the generated credential files
    ansible.builtin.copy:
      src: "{{ rhocp_install_path }}/ccoctl/manifests/"
      dest: "{{ rhocp_install_path }}/manifests/"
      remote_src: true

  - name: 'Create MachineConfig to enable the icscid service on the master nodes'
    ansible.builtin.template:
      src: templates/99-master-ntnx-csi-enable-iscsid.yaml.j2
      dest: "{{ rhocp_install_path }}/openshift/99-master-ntnx-csi-enable-iscsid.yaml"

  - name: 'Create MachineConfig to enable the icscid service on the worker nodes'
    ansible.builtin.template:
      src: templates/99-worker-ntnx-csi-enable-iscsid.yaml.j2
      dest: "{{ rhocp_install_path }}/openshift/99-worker-ntnx-csi-enable-iscsid.yaml"

  - name: 'Create cloud-config ConfigMap'
    ansible.builtin.template:
      src: templates/openshift-cloud-controller-manager-cloud-config.yaml.j2
      dest: "{{ rhocp_install_path }}/manifests/openshift-cloud-controller-manager-cloud-config.yaml"

  - name: 'Create cloud-config secret'
    ansible.builtin.template:
      src: templates/openshift-cloud-controller-manager-nutanix-credentials-credentials.yaml.j2
      dest: "{{ rhocp_install_path }}/manifests/openshift-cloud-controller-manager-nutanix-credentials-credentials.yaml"

  - name: |
      'Run openshift-install create cluster.  This task will take 25-45 minutes.
      To watch the progress, tail the .openshift-install.log in the install directory.'
    ansible.builtin.shell:
      cmd: "openshift-install create cluster --log-level=debug --dir={{ rhocp_install_path }}"

  - name: 'Register last 12 lines of .openshift_install.log'
    ansible.builtin.shell:
      cmd: "tail -12 {{ rhocp_install_path }}/.openshift_install.log"
    register: install_log_output
    changed_when: false

  - name: 'Display tail of .openshift_install.log'
    debug:
      msg: "{{install_log_output.stdout}}"